var JsonMLWalker = require('../../jsonml/grammars/jsonml_walker.ojs'),
    _            = require('../nodes'),
    join         = require('../../utils.js').join,
    stmt         = require('../utils.js').stmt,
    expr         = require('../utils.js').expr;

ometa EJSTranslator <: JsonMLWalker {

  // Helper rule                   
  assure_block       = ~undefined :n ( ?n.hasType('BlockStmt') walk(n)                   //     {...} -> {...}
                                     | walk(_.BlockStmt([n]))                            //       ... -> {...}
                                     ),

  implicit_return    = walk:body !this.helpers.implicit_return(body),

  LambdaExpr      :n = walk:args implicit_return:body                           -> _.Function(args, body),

  // allow rest-spread
  Function        :n = walk:args walk:body                                               -> this.rules.Function(n, args, body),

  // slice expression
  // decision: I go with member.slice(start, end) instead of the more complicate
  //     (function(__m) {
  //       var $ = __m.length;
  //       return __.slice(#{fromExpr}, #{toExpr})
  //     })(#{memberExpr});
  //
  // why?
  // JavaScript can slice arrays to til end by either ommiting the last parameter or by
  // passing undefined.
  // If we wish to slice until the second last element we simply can use `-1`, so there
  // is no need for a $-variable and closure-wrapping.
  SliceExpr       :n = walk:memberExpr walk:fromExpr walk:toExpr
                         ( ?(toExpr.hasType('Id') && toExpr.is('value', '$'))            -> expr(memberExpr, '.slice(', fromExpr, ')')
                         | empty                                                         -> expr(memberExpr, '.slice(', fromExpr, ',', toExpr, ')')
                         ),

  ExtendExpr      :n = walk:memberExpr walk:obj                                          -> expr('Object.extend(', memberExpr, ', ', obj, ')'),

  // Rethink to allow base <| function() {} and base <| /regex/i
  // see brandon eich's slides of JSConf.eu
  // with `Object.prototype.proto` being implemented like 
  //     function proto(base){ this.__proto__ = base; return this; }
  PrototypeExpr   :n = walk:ext walk:base                                                -> expr('Object.proto(', base, ',', ext, ')'),

  StringExpr      :n = walk*:els                                                         -> expr(_.ArrayExpr(els), '.join("")'),

  ScopeExpr       :n = walk:block                                                        -> stmt('(function()', block, ').call(this)'),

  ClassStmt       :n = walk:sections walk:spec walk:constr                               -> this.rules.ClassStmt(n, sections, spec, constr),
  
  DebugStmt       :n = walk:block                                                        -> stmt('if(typeof $DEBUG != "undefined")', block),

  ModuleStmt      :n = walk:impl                                                         -> stmt("Object.define_module('", n.name(), "', function(module, exports, require)", impl, ");"),

  ForOfStmt       :n = walk:vars walk:collExpr walk:stmt                                 -> this.rules.ForOfStmt(n, vars, collExpr, stmt),
  ForInStmt       :n = walk:vars walk:collExpr walk:stmt                                 -> this.rules.ForInStmt(n, vars, collExpr, stmt),

  PatternMatcher  :n = walk:exp walk*:cases                                              -> this.rules.PatternMatcher(exp, cases),
  PatternCase     :n = walk:p assure_block:b                                             -> [".pattern(",p,").then(function(bindings)", this.helpers.implicit_return(b), ")"],
  Pattern         :n = walk*:vals ( ?n.has('binding')                                    -> expr(n.kind(), "(", _.SequenceExpr(vals), ").as('", n.binding(), "')")
                                  | empty                                                -> expr(n.kind(), "(", _.SequenceExpr(vals), ")")
                                  )
}
EJSTranslator.force_rules = false;
EJSTranslator.helpers = {

  implicit_return: function(body) {
 
    var allowed    = ['String', 'Id', 'Number', 'Function'],
        statements = body.children(); 

    // IMPLICIT RETURNS if there are any children
    if(statements.length == 0)
      return body;

    var last = statements.pop(), // get the last child-node
        type = last.type();

    // only implicitly return allowed values (only expressions)
    // naming convention helps: (Everything, that ends with Expr)
    if(allowed.indexOf(type) !== -1 || type.match(/Expr$/))
      last = _.ReturnStmt(last);

    // push it on body again...
    statements.push(last);
    return _.BlockStmt(statements);
  }
}

EJSTranslator.rules = {

  Function: function(node, args, body) {

    // if there are no rest-arguments, stay unchanged
    if(!args.has('rest'))
      return node;
    
    // needs to be a string (Otherwise `utils.stmt` would try to translate it)
    var arg_count = (args.length - 2).toString();

    // build variable definiton for rest
    var rest = stmt("var ", args.rest(), "=[].slice.call(arguments,", arg_count, ")");

    // insert as first child of body
    body.splice(2, 0, rest);
    
    // reuse `node`
    node[2] = args;
    node[3] = body;
    return node;
  },

  // EJS.define_class('name', { parent_name: 'extend', 
  //                            get_parent: function(){ return extend; },
  //                            set_class: function(__class__) { name = __class__; },
  //                            sections: { ... },
  //                            spec: { ... }
  // });
  ClassStmt: function(node, sections, spec, constr) {

    if(!node.has('parent') || node.is('parent', ''))
      var parent_name = 'undefined';
    else
      var parent_name = join('"', node.parent(), '"');

    if(constr === undefined)
      constr = 'undefined';

    return stmt('Object.define_class("', node.name(), '", {',
      'parent_name: ', parent_name, ',',
      'get_parent: function() { return ', node.parent(), '},',
      'set_class: function(__class__) { ', node.name(), '=__class__},',
      'constructor:', constr, ',',
      'sections:', sections, ',',
      'spec:', spec,
    '})');
  },

  ForOfStmt: function(node, vars, collExpr, statement) {

    var key = vars[2],
        el  = vars[3];

    // an element name is given create an assignment statement and add it as first child
    // to stmt.
    if(el !== undefined) {
      var el_assign = stmt("var ", el, "=", collExpr, "[", key, "];");
      
      // add declaration-statement
      if(statement.hasType('BlockStmt'))
        statement.splice(2,0, el_assign);

      // create new BlockStmt if stmt isn't a Block yet
      else
        statement = _.BlockStmt([el_assign, statement]);
    }

    return stmt("for( var ", key, " in ", collExpr, ") {",
      "if(", collExpr, ".hasOwnProperty(",key,"))",
        statement,
    "}");
  },

  // Override default behaviour of ForIn to allow 
  // for(var i, el in arr) { console.log(el) }
  ForInStmt: function(node, vars, collExpr, statement) {

    var key = vars[2],
        el  = vars[3];

    // keep unchanged
    if(el === undefined)
      return node;

    // an element name is given  
    else return stmt("for( var ", key, " in ", collExpr, ") {", 
      "var ", el, "=", collExpr, "[", key, "];",       
      statement,
    "}");
  },
  
  PatternMatcher: function(exp, cases) {
    var result = ["Object.match(", exp, ")"];
        
    for(var i = 0; i < cases.length; i++)
      result.push.apply(result, cases[i])
    
    return expr.apply(this, result)
  }
}

EJSTranslator.translate = function(input) {
  return EJSTranslator.match(input, 'walk')
};


// This is an alternative implementation of the implicit return mechanism
ometa ImplicitReturn <: JsonMLWalker {

  assureBlock :n = ( ?n.hasType('BlockStmt') transform(n)
                   | transform(_.BlockStmt([n]))
                   ),
     
  transform      = [:t :props (anything:el &anything !el)*:first walk:last]              -> _.BlockStmt(first.concat([last])),
  implicit    :n                                                                         -> _.ReturnStmt(n),

  // Literals
  Id             = implicit,
  Number         = implicit,
  String         = implicit,
  RegExpr        = implicit,
  ObjectExpr     = implicit,
  ArrayExpr      = implicit,

  Function   :n  = ( ?n.is('expr') implicit(n)
                   | empty -> n
                   ),

  SequenceExpr   = implicit,
  CondExpr       = implicit,
  BinaryExpr     = implicit,
  UpdateExpr     = implicit,
  NewExpr        = implicit,
  CallExpr       = implicit,
  MemberExpr     = implicit,
  ThisExpr       = implicit,
  GroupExpr      = implicit,

  // call recursively on  true and false part
  IfStmt      :n = :c assureBlock:t (assureBlock:f)?                                     -> _.IfStmt(c, t, f)

}

module.exports = EJSTranslator;
