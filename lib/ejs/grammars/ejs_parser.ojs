// dependencies: requires the es5-grammar to be loaded and evaled in same namespace
/**
 * Extended JS / Example JS
 * ========================
 * This file describes a new syntax and how the it is desugared to current JavaScript.
 * If the desugering-rules are more complex than a simple Expression or Statement they
 * are outsourced to the ejs_translator.ojs
 */
var ES5Parser = require('../../es5/grammars/es5_parser.ojs'),
    _         = require('../nodes.js');

ometa EJSParser <: ES5Parser {
  
  // NEW PUNCTUATORS
  punctuator        = (``...'' | ``..'' | ``.='' | ``<|''
                      ):p                                                                -> _.Punctuator(p)
                    | ^punctuator,

  // NEW PRIMARY EXPRESSIONS

  // This special handling for new keywords allows us to use Id's (variable-names) as
  // keywords, without the need to reserve them. Now `not` can be used as unary keyword
  // and as variable name, too:
  //     var not = not foo
  specialId      :x = spaces identifier:i ?(i === x)                                     -> i,

  nil               = specialId('nil')                                                   -> _.Id('undefined'),

  // allows string-substitution like "foo #{bar} baz"    
  stringExpr        = spaces (``""''                                                     -> _.String("") //preserve empty strings
                             | '"' (strSubst | strPart)+:cs '"'                          -> _.StringExpr(cs)
                             ),                                                                                            
  strSubst          = ``#{'' spaces expr:e spaces '}'                                    -> e,
  strPart           = <(escapeChar | ~('"'| ``#{'') char)+>:cs                           -> _.String(cs),

  primExpr          = stringExpr | nil | ^primExpr,


  // NEW EXPRESSIONS

  // new Binary and Unary-Expressions
  orExpr            = orExpr:x specialId('or') andExpr:y                                 -> _.BinaryExpr(x, y).operator("||")
                    | ^orExpr,
  andExpr           = andExpr:x specialId('and') bitOrExpr:y                             -> _.BinaryExpr(x, y).operator("&&")
                    | ^andExpr,    
  unaryExpr         = specialId('not') unaryExpr:p                                       -> _.UnaryExpr(p).operator("!")
                    | ^unaryExpr,


  // shorthand function/lambda-syntax like {|a| a +1 }
  lambdaExpr        = "{" ("||"                              -> []
                     |"|" spaces listOf(#formal, ','):a "|"  -> a
                     ):args spaces srcElem*:ss "}"                                       -> _.LambdaExpr(_.FunctionArgs(args), _.BlockStmt(ss)),

  // allow lambda-expression as alternate to funcExpr  
  funcExpr          = lambdaExpr
                    | ^funcExpr,

  // allow rest arguments with `...`
  funcArgs          = listOf(#formal, ','):args "," "..." "Id":r                         -> _.FunctionArgs(args).rest(r)
                    | ^funcArgs,

  // Shortsyntax for: `(function(){ ... }();` is now !{ ... }
  // and maybe !{|hurdel as foo, bar as baz| ... } could be a short syntax for (function(foo, baz) { })(hurdel, bar);
  forceScopeExpr    = spaces '!' block:b                                                 -> _.ScopeExpr(b),

  // see extendExpr  
  extendOpExpr      = leftExpr:b spaces ".=" objectLiteral:e                             -> _.ExtendExpr(b, e), 

  assignExpr        = forceScopeExpr
                    | extendOpExpr
                    | ^assignExpr,

  // NEW MEMBER EXPRESSIONS

  // Call a member or a function and additional block or without arguments with lambda only
  // foo(b) {|a| a } -> foo(b, function(a) {return a})
  // foo {|a| a}     -> foo(function(a) {return a})
  lambdaCallExpr :p = ("(" listOf(#assignExpr, ','):a ")" -> a
                      | empty                             -> []
                      ):args lambdaExpr:f                                                -> _.CallExpr(p, args.concat(f)),

  // Array slicing like arr[2..$] -> arr.slice(2) or arr[1..3] -> arr.slice(1,3)
  sliceExpr      :p = "[" expr:s ".." expr:e "]"                                         -> _.SliceExpr(p, s, e),
  
  // monocular mustage expression
  // foo.{ bar: 4} -> foo.extend({ bar: 4 })
  extendExpr     :p = "." &'{' objectLiteral:o                                           -> _.ExtendExpr(p, o),

  // Triangle Operator base <| { foo: 4 }
  protoExpr      :p = spaces ``<|'' (primExpr | funcExpr):e                              -> _.PrototypeExpr(p, e),

  // @foo -> this.foo
  // this is a base-type, which only can appear as starting point of a member-expr
  instanceExpr      = spaces '@' identifier:i                                            -> _.MemberExpr(_.ThisExpr()).name(i),

  // register all additional expressions and base-types
  accessExpr        = accessExpr:p lambdaCallExpr(p)
                    | accessExpr:p sliceExpr(p)
                    | accessExpr:p extendExpr(p)    
                    | accessExpr:p protoExpr(p)                
                    | ^accessExpr
                    | instanceExpr,


  // NEW STATEMENTS
  // this is needed for statements that lookahead for sc
  sc               = spacesNoNl (linebreak | &'}' | end | specialId('end'))
                   | ";",

  block            = "do" (~specialId('end') srcElem)*:ss ( specialId('end')     
                                                          | &"else"
                                                          )                              -> _.BlockStmt(ss)
                   | ^block,
  


  loop              = specialId('loop') stmt:s                                           -> _.ForStmt(undefined, undefined, undefined, s),

  // make braces optional but require block
  if                = "if" ("(" expr:c ")" stmt:t 
                           | expr:c        block:t
                           ) ( "else" stmt )?:f                                          -> _.IfStmt(c, t, f),
  unless            = specialId('unless') ("(" expr:c ")" stmt:t 
                                          | expr:c        block:t
                                          ) ( "else" stmt )?:f                           -> _.IfStmt(_.UnaryExpr(_.GroupExpr(c)).operator('!'), t, f),

  postIf            = expr:t "if" ("(" expr:c ")"
                                  | expr:c
                                  ) sc                                                   -> _.IfStmt(c, t, undefined),
  postUnless        = expr:t specialId('unless') ("(" expr:c ")"
                                                 | expr:c
                                                 ) sc                                    -> _.IfStmt(_.UnaryExpr(_.GroupExpr(c)).operator('!'), t, undefined),


  debug             = specialId('debug') spaces stmt:s                                   -> _.DebugStmt(s),

  module            = specialId('module') spaces <name ('.' name)*>:n block:b            -> _.ModuleStmt(n, b),

  klass             = "class" spaces <name ('.' name)*>:n ("<" spaces <name ('.' name)*>:e)? 
                      "{"
                         klassSect*:s                         
                         ( funcExpr:f ?f.is('id', undefined) -> f )?:c   // only unnamed functions are allowed as constructor
                         klassProps:p                                                         
                      "}"                                                                -> _.ClassStmt(n, e, _.ObjectExpr(s), _.ObjectExpr(p), c),
    
                    // we simply allow all identifiers
  klassSect         = spaces "Id":n ~':'
  
                      // empty section, used for boolean values
                      ( sc                                                               -> _.ArrayExpr()           

                      | "{" "}"                                                          -> _.ArrayExpr()

                      // array `{ foo, bar, baz }`
                      // or object `{ foo: "bar", bar: "baz" }`
                      | "{" spaces
                           ( objBinding:f (',' objBinding)*:r      -> _.ObjectExpr([f].concat(r))
                           | assignExpr:f (',' assignExpr)*:r      -> _.ArrayExpr([f].concat(r))                   
                           ):p
                        "}"                                                              -> p
                      // same, only without commas
                      | "{" spaces
                           ( objBinding:f (sc objBinding)*:r   -> _.ObjectExpr([f].concat(r))
                           | assignExpr:f (sc assignExpr)*:r   -> _.ArrayExpr([f].concat(r))
                           ):p
                        "}"                                                              -> p

                      // comma-separated array `mixins foo, bar, baz`
                      | spaces ~'{' listOf(#assignExpr, ','):r                           -> _.ArrayExpr(r) 
                      ):c                                                                -> _.PropertyBinding(n, c),

  // only comma or semicolon separated
  klassProps        = spaces ( klassProp:f ((sc | ",") klassProp)*:r                     -> [f].concat(r)
                             | empty                                                     -> []
                             ),

  klassProp         = objBinding 
                    | klassMethod:f ?f.not('id', undefined)                              -> _.PropertyBinding(f.id(), f),

  klassMethod       = "Id":n  "(" funcArgs:args ")" block:block                          -> _.Function(args, block).id(n.value()),

  forOf             = "for" "(" bindings:v specialId("of") expr:e ")" stmt:s             -> _.ForOfStmt(v, e, s),



  // translates pattern matching like  
  //    match(foo) {
  //      case 0 => 1
  //      case n => n + 1
  //    }
  //
  // into
  //    Object.match(foo).pattern(Number(0)).then(function(bindings) {
  //      return 1;
  //    }).pattern(Any().as("n")).then(function(bindings) {
  //      return n + 1;
  //    })
  //
  // and
  //    match(foo) {
  //      case Foo('bar', 123) => yes()
  //      case [Foo:my, 'bar', ...] => do_it()
  //    }
  // into
  //    Object.match(foo).pattern(Foo(String("bar"), Number(123))).then(function(bindings) {
  //      return yes();
  //    }).pattern(Array(Foo().as("my"), String("bar"), Ellipsis())).then(function(bindings) {
  //      return do_it();
  //    })
  //
  // NOTE: this is just a first try. bindings should be bound to arguments of the handler-
  // functions
  patternExpr       = specialId('match') "(" expr:e ")"                                  
                      "{"
                         patternCase*:c
                      "}"                                                                -> _.PatternMatcher(e, c),
                      
  patternCase       = "case" pattern:p spaces ``=>'' (block | expr):b                    -> _.PatternCase(p, b),
  
  pattern           = spaces ( string:s                                                  -> _.Pattern([s]).kind('String')
                             | number:n                                                  -> _.Pattern([n]).kind('Number')
                             | reLiteral:r                                               -> _.Pattern([r]).kind('RegExp')
                             | "[" listOf(#pattern, ','):els "]"                         -> _.Pattern(els).kind('Array')
                             | caseClass:id "(" listOf(#pattern, ','):els ")"            -> _.Pattern(els).kind(id)
                             | caseClass:id                                              -> _.Pattern([]).kind(id)
                             | ``...''                                                   -> _.Pattern([]).kind('Ellipsis')
                             ):p 
                    (":" identifier:id                                                   -> p.binding(id)
                    | empty                                                              -> p
                    )
                    | spaces identifier:id                                               -> _.Pattern([]).kind('Any').binding(id),
  
  caseClass         = <range('A','Z') letter*>,
  
  expr              = patternExpr | ^expr,

  stmt              = loop  | if | unless | postIf | postUnless | debug | module | forOf 
                    | klass | ^stmt
  
}

EJSParser.parse = function(input, options) {
  return EJSParser.matchAll(input, 'topLevel')
}
module.exports = EJSParser;
